220. Problem Statement: Create a class Matrix to represent a 2D matrix. Implement
member functions to add, subtract, and multiply two matrices.
Objectives: To practice implementing arithmetic operations for matrix data structures.
Functionalities: Perform matrix addition, subtraction, and multiplication.

#include <iostream>
using namespace std;
#include <vector>

class Matrix {
private:
    std::vector<std::vector<int>> data;
    int rows, cols;

public:
    
    Matrix(int r, int c) : rows(r), cols(c), data(r, std::vector<int>(c, 0)) {}

    
    void input() {
        cout << "Enter elements of the matrix (" << rows << "x" << cols << "):\n";
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                std::cin >> data[i][j];
            }
        }
    }

    
    void display() const {
        for (const auto &row : data) {
            for (const auto &elem : row) {
              cout << elem << " ";
            }
            cout << std::endl;
        }
    }

  
    Matrix operator+(const Matrix &other) const {
        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] + other.data[i][j];
            }
        }
        return result;
    }

    
    Matrix operator-(const Matrix &other) const {
        Matrix result(rows, cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < cols; ++j) {
                result.data[i][j] = data[i][j] - other.data[i][j];
            }
        }
        return result;
    }

    // Function to multiply two matrices
    Matrix operator*(const Matrix &other) const {
        Matrix result(rows, other.cols);
        for (int i = 0; i < rows; ++i) {
            for (int j = 0; j < other.cols; ++j) {
                result.data[i][j] = 0;
                for (int k = 0; k < cols; ++k) {
                    result.data[i][j] += data[i][k] * other.data[k][j];
                }
            }
        }
        return result;
    }
};

int main() {
    int rows1, cols1, rows2, cols2;

cout << "Enter dimensions of first matrix (rows columns): ";
    cin >> rows1 >> cols1;
    Matrix mat1(rows1, cols1);
    mat1.input();

cout << "Enter dimensions of second matrix (rows columns): ";
cin >> rows2 >> cols2;
    Matrix mat2(rows2, cols2);
    mat2.input();

cout << "Matrix 1:\n";
    mat1.display();

cout << "Matrix 2:\n";
    mat2.display();

    if (rows1 == rows2 && cols1 == cols2) {
        Matrix sum = mat1 + mat2;
  cout << "Sum of matrices:\n";
        sum.display();

        Matrix diff = mat1 - mat2;
cout << "Difference of matrices:\n";
        diff.display();
    } else {
cout << "Matrices cannot be added or subtracted due to different dimensions.\n";
    }

    if (cols1 == rows2) {
        Matrix product = mat1 * mat2;
cout << "Product of matrices:\n";
        product.display();
    } else {
        cout << "Matrices cannot be multiplied due to incompatible dimensions.\n";
    }

    return 0;
}
